
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.generated;

import java.util.ArrayList;
import nodi.*;
import nodi.statement.*;
import nodi.operation.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\007\005\000\002\002\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\003\000\002\027\004" +
    "\000\002\027\004\000\002\027\003\000\002\027\003\000" +
    "\002\013\004\000\002\012\005\000\002\012\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\025\007\000\002\026\005\000" +
    "\002\026\007\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\005\012\000\002\005\011\000\002\014\006" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\006\004\000\002\006\005\000\002\011\003\000\002\011" +
    "\003\000\002\032\003\000\002\032\004\000\002\033\003" +
    "\000\002\033\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\016\005\000\002\016" +
    "\004\000\002\017\007\000\002\017\006\000\002\015\004" +
    "\000\002\020\006\000\002\021\012\000\002\022\005\000" +
    "\002\022\004\000\002\034\003\000\002\034\005\000\002" +
    "\023\006\000\002\023\006\000\002\024\005\000\002\004" +
    "\006\000\002\004\005\000\002\035\003\000\002\035\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\022\004\010\006\014\007\005\010\007\011" +
    "\016\012\013\013\021\017\017\001\002\000\004\014\254" +
    "\001\002\000\006\014\ufff5\023\ufff5\001\002\000\004\002" +
    "\253\001\002\000\006\014\ufff4\023\ufff4\001\002\000\004" +
    "\017\017\001\002\000\024\002\ufff9\004\ufff9\006\014\007" +
    "\005\010\007\011\016\012\013\013\021\017\017\001\002" +
    "\000\024\002\ufffa\004\ufffa\006\014\007\005\010\007\011" +
    "\016\012\013\013\021\017\017\001\002\000\006\014\ufff2" +
    "\023\ufff2\001\002\000\004\014\231\001\002\000\004\004" +
    "\010\001\002\000\006\014\ufff3\023\ufff3\001\002\000\004" +
    "\014\023\001\002\000\022\002\ufffd\006\014\007\005\010" +
    "\007\011\016\012\013\013\021\017\017\001\002\000\006" +
    "\014\ufff1\023\ufff1\001\002\000\004\002\uffff\001\002\000" +
    "\004\020\024\001\002\000\020\007\005\010\007\011\016" +
    "\012\013\013\021\021\031\026\032\001\002\000\004\014" +
    "\034\001\002\000\004\021\222\001\002\000\006\021\uffdd" +
    "\025\uffdd\001\002\000\006\021\uffde\025\220\001\002\000" +
    "\004\022\040\001\002\000\014\007\005\010\007\011\016" +
    "\012\013\013\021\001\002\000\004\014\034\001\002\000" +
    "\010\016\uffc3\021\uffc3\025\uffc3\001\002\000\010\016\036" +
    "\021\uffda\025\uffda\001\002\000\004\014\037\001\002\000" +
    "\014\015\uffc2\016\uffc2\021\uffc2\025\uffc2\040\uffc2\001\002" +
    "\000\016\007\005\010\007\011\016\012\013\013\021\027" +
    "\043\001\002\000\004\023\044\001\002\000\004\023\uffd9" +
    "\001\002\000\004\023\uffd8\001\002\000\034\006\014\007" +
    "\005\010\007\011\016\012\013\013\021\014\056\020\070" +
    "\024\060\030\053\031\055\034\052\036\067\001\002\000" +
    "\024\002\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\017\uffe3\001\002\000\020\014\uffd2\020" +
    "\uffd2\024\uffd2\030\uffd2\031\uffd2\034\uffd2\036\uffd2\001\002" +
    "\000\004\005\217\001\002\000\020\014\056\020\070\024" +
    "\uffd5\030\053\031\055\034\052\036\067\001\002\000\004" +
    "\005\215\001\002\000\026\014\103\020\077\042\071\057" +
    "\105\062\102\063\072\064\075\065\100\066\076\067\104" +
    "\001\002\000\030\005\210\014\103\020\077\042\071\057" +
    "\105\062\102\063\072\064\075\065\100\066\076\067\104" +
    "\001\002\000\004\005\206\001\002\000\026\014\103\020" +
    "\077\042\071\057\105\062\102\063\072\064\075\065\100" +
    "\066\076\067\104\001\002\000\012\015\uffc3\016\uffc3\020" +
    "\143\040\uffc3\001\002\000\004\024\177\001\002\000\044" +
    "\002\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf\024\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\036\uffdf\001\002\000\020\014" +
    "\056\020\070\024\175\030\053\031\055\034\052\036\067" +
    "\001\002\000\010\015\171\016\036\040\170\001\002\000" +
    "\034\006\014\007\005\010\007\011\016\012\013\013\021" +
    "\014\uffd7\020\uffd7\024\uffd7\030\uffd7\031\uffd7\034\uffd7\036" +
    "\uffd7\001\002\000\020\014\uffce\020\uffce\024\uffce\030\uffce" +
    "\031\uffce\034\uffce\036\uffce\001\002\000\004\005\166\001" +
    "\002\000\020\014\uffd3\020\uffd3\024\uffd3\030\uffd3\031\uffd3" +
    "\034\uffd3\036\uffd3\001\002\000\004\014\157\001\002\000" +
    "\026\014\103\020\077\042\071\057\105\062\102\063\072" +
    "\064\075\065\100\066\076\067\104\001\002\000\026\014" +
    "\103\020\077\042\071\057\105\062\102\063\072\064\075" +
    "\065\100\066\076\067\104\001\002\000\050\005\uffb7\016" +
    "\uffb7\021\uffb7\032\uffb7\035\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\044" +
    "\005\uffbc\016\154\021\uffbc\041\113\042\107\043\120\044" +
    "\117\045\110\046\111\047\122\050\124\051\116\052\112" +
    "\053\123\054\115\055\114\056\121\001\002\000\004\021" +
    "\151\001\002\000\050\005\uffba\016\uffba\021\uffba\032\uffba" +
    "\035\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\001\002\000\050\005\uffb6\016\uffb6\021" +
    "\uffb6\032\uffb6\035\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002\000\026\014\103" +
    "\020\077\042\071\057\105\062\102\063\072\064\075\065" +
    "\100\066\076\067\104\001\002\000\050\005\uffb9\016\uffb9" +
    "\021\uffb9\032\uffb9\035\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000\050\005" +
    "\uffb3\016\uffb3\021\uffb3\032\uffb3\035\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002" +
    "\000\050\005\uffb8\016\uffb8\021\uffb8\032\uffb8\035\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\001\002\000\052\005\uffb4\016\uffb4\020\143\021\uffb4" +
    "\032\uffb4\035\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\001\002\000\050\005\uffb5\016" +
    "\uffb5\021\uffb5\032\uffb5\035\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002\000\026" +
    "\014\103\020\077\042\071\057\105\062\102\063\072\064" +
    "\075\065\100\066\076\067\104\001\002\000\050\005\uffa3" +
    "\016\uffa3\021\uffa3\032\uffa3\035\uffa3\041\113\042\107\043" +
    "\120\044\117\045\uffa3\046\111\047\122\050\uffa3\051\116" +
    "\052\112\053\123\054\115\055\114\056\121\001\002\000" +
    "\026\014\103\020\077\042\071\057\105\062\102\063\072" +
    "\064\075\065\100\066\076\067\104\001\002\000\026\014" +
    "\103\020\077\042\071\057\105\062\102\063\072\064\075" +
    "\065\100\066\076\067\104\001\002\000\026\014\103\020" +
    "\077\042\071\057\105\062\102\063\072\064\075\065\100" +
    "\066\076\067\104\001\002\000\026\014\103\020\077\042" +
    "\071\057\105\062\102\063\072\064\075\065\100\066\076" +
    "\067\104\001\002\000\026\014\103\020\077\042\071\057" +
    "\105\062\102\063\072\064\075\065\100\066\076\067\104" +
    "\001\002\000\026\014\103\020\077\042\071\057\105\062" +
    "\102\063\072\064\075\065\100\066\076\067\104\001\002" +
    "\000\026\014\103\020\077\042\071\057\105\062\102\063" +
    "\072\064\075\065\100\066\076\067\104\001\002\000\026" +
    "\014\103\020\077\042\071\057\105\062\102\063\072\064" +
    "\075\065\100\066\076\067\104\001\002\000\026\014\103" +
    "\020\077\042\071\057\105\062\102\063\072\064\075\065" +
    "\100\066\076\067\104\001\002\000\026\014\103\020\077" +
    "\042\071\057\105\062\102\063\072\064\075\065\100\066" +
    "\076\067\104\001\002\000\026\014\103\020\077\042\071" +
    "\057\105\062\102\063\072\064\075\065\100\066\076\067" +
    "\104\001\002\000\026\014\103\020\077\042\071\057\105" +
    "\062\102\063\072\064\075\065\100\066\076\067\104\001" +
    "\002\000\026\014\103\020\077\042\071\057\105\062\102" +
    "\063\072\064\075\065\100\066\076\067\104\001\002\000" +
    "\026\014\103\020\077\042\071\057\105\062\102\063\072" +
    "\064\075\065\100\066\076\067\104\001\002\000\050\005" +
    "\uffab\016\uffab\021\uffab\032\uffab\035\uffab\041\113\042\107" +
    "\043\120\044\117\045\uffab\046\111\047\122\050\uffab\051" +
    "\116\052\112\053\123\054\115\055\114\056\121\001\002" +
    "\000\034\005\uffa8\016\uffa8\021\uffa8\032\uffa8\035\uffa8\041" +
    "\113\042\107\043\120\044\117\045\uffa8\046\111\047\122" +
    "\050\uffa8\001\002\000\050\005\uffac\016\uffac\021\uffac\032" +
    "\uffac\035\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\111\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\001\002\000\034\005\uffa5\016\uffa5" +
    "\021\uffa5\032\uffa5\035\uffa5\041\113\042\107\043\120\044" +
    "\117\045\uffa5\046\111\047\122\050\uffa5\001\002\000\050" +
    "\005\uffb0\016\uffb0\021\uffb0\032\uffb0\035\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\111\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001" +
    "\002\000\050\005\uffaf\016\uffaf\021\uffaf\032\uffaf\035\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\111\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\001\002\000\034\005\uffaa\016\uffaa\021\uffaa\032" +
    "\uffaa\035\uffaa\041\113\042\107\043\120\044\117\045\uffaa" +
    "\046\111\047\122\050\uffaa\001\002\000\034\005\uffa7\016" +
    "\uffa7\021\uffa7\032\uffa7\035\uffa7\041\113\042\107\043\120" +
    "\044\117\045\uffa7\046\111\047\122\050\uffa7\001\002\000" +
    "\034\005\uffa6\016\uffa6\021\uffa6\032\uffa6\035\uffa6\041\113" +
    "\042\107\043\120\044\117\045\uffa6\046\111\047\122\050" +
    "\uffa6\001\002\000\050\005\uffb2\016\uffb2\021\uffb2\032\uffb2" +
    "\035\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\111\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\001\002\000\034\005\uffa9\016\uffa9\021" +
    "\uffa9\032\uffa9\035\uffa9\041\113\042\107\043\120\044\117" +
    "\045\uffa9\046\111\047\122\050\uffa9\001\002\000\050\005" +
    "\uffad\016\uffad\021\uffad\032\uffad\035\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\111\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\001\002" +
    "\000\050\005\uffae\016\uffae\021\uffae\032\uffae\035\uffae\041" +
    "\113\042\107\043\120\044\117\045\uffae\046\111\047\122" +
    "\050\uffae\051\116\052\112\053\123\054\115\055\114\056" +
    "\121\001\002\000\050\005\uffb1\016\uffb1\021\uffb1\032\uffb1" +
    "\035\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\111\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\001\002\000\030\014\103\020\077\021" +
    "\145\042\071\057\105\062\102\063\072\064\075\065\100" +
    "\066\076\067\104\001\002\000\004\021\146\001\002\000" +
    "\050\005\uffbd\016\uffbd\021\uffbd\032\uffbd\035\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\001\002\000\050\005\uffbe\016\uffbe\021\uffbe\032\uffbe\035" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\040\021\150\041\113\042\107" +
    "\043\120\044\117\045\110\046\111\047\122\050\124\051" +
    "\116\052\112\053\123\054\115\055\114\056\121\001\002" +
    "\000\050\005\uffa2\016\uffa2\021\uffa2\032\uffa2\035\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\001\002\000\006\060\152\061\153\001\002\000\004" +
    "\005\uffc1\001\002\000\004\005\uffc0\001\002\000\026\014" +
    "\103\020\077\042\071\057\105\062\102\063\072\064\075" +
    "\065\100\066\076\067\104\001\002\000\006\005\uffbb\021" +
    "\uffbb\001\002\000\050\005\uffa4\016\uffa4\021\uffa4\032\uffa4" +
    "\035\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\111\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\001\002\000\004\015\160\001\002\000" +
    "\004\062\161\001\002\000\004\037\162\001\002\000\004" +
    "\062\163\001\002\000\004\035\164\001\002\000\004\023" +
    "\044\001\002\000\020\014\uffc6\020\uffc6\024\uffc6\030\uffc6" +
    "\031\uffc6\034\uffc6\036\uffc6\001\002\000\020\014\uffd0\020" +
    "\uffd0\024\uffd0\030\uffd0\031\uffd0\034\uffd0\036\uffd0\001\002" +
    "\000\020\014\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6\034" +
    "\uffd6\036\uffd6\001\002\000\006\005\uffc4\066\173\001\002" +
    "\000\026\014\103\020\077\042\071\057\105\062\102\063" +
    "\072\064\075\065\100\066\076\067\104\001\002\000\004" +
    "\005\uffbf\001\002\000\004\005\uffc5\001\002\000\004\024" +
    "\176\001\002\000\044\002\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0\020" +
    "\uffe0\024\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\036\uffe0" +
    "\001\002\000\044\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\020\uffe2" +
    "\024\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2\001" +
    "\002\000\044\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\020\uffe1\024" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\036\uffe1\001\002" +
    "\000\040\032\201\041\113\042\107\043\120\044\117\045" +
    "\110\046\111\047\122\050\124\051\116\052\112\053\123" +
    "\054\115\055\114\056\121\001\002\000\004\023\044\001" +
    "\002\000\022\014\uffc9\020\uffc9\024\uffc9\030\uffc9\031\uffc9" +
    "\033\203\034\uffc9\036\uffc9\001\002\000\004\023\044\001" +
    "\002\000\020\014\uffca\020\uffca\024\uffca\030\uffca\031\uffca" +
    "\034\uffca\036\uffca\001\002\000\020\014\uffc8\020\uffc8\024" +
    "\uffc8\030\uffc8\031\uffc8\034\uffc8\036\uffc8\001\002\000\020" +
    "\014\uffcd\020\uffcd\024\uffcd\030\uffcd\031\uffcd\034\uffcd\036" +
    "\uffcd\001\002\000\040\005\211\041\113\042\107\043\120" +
    "\044\117\045\110\046\111\047\122\050\124\051\116\052" +
    "\112\053\123\054\115\055\114\056\121\001\002\000\020" +
    "\014\uffcb\020\uffcb\024\uffcb\030\uffcb\031\uffcb\034\uffcb\036" +
    "\uffcb\001\002\000\020\014\uffcc\020\uffcc\024\uffcc\030\uffcc" +
    "\031\uffcc\034\uffcc\036\uffcc\001\002\000\040\035\213\041" +
    "\113\042\107\043\120\044\117\045\110\046\111\047\122" +
    "\050\124\051\116\052\112\053\123\054\115\055\114\056" +
    "\121\001\002\000\004\023\044\001\002\000\020\014\uffc7" +
    "\020\uffc7\024\uffc7\030\uffc7\031\uffc7\034\uffc7\036\uffc7\001" +
    "\002\000\020\014\uffcf\020\uffcf\024\uffcf\030\uffcf\031\uffcf" +
    "\034\uffcf\036\uffcf\001\002\000\004\024\uffd4\001\002\000" +
    "\020\014\uffd1\020\uffd1\024\uffd1\030\uffd1\031\uffd1\034\uffd1" +
    "\036\uffd1\001\002\000\016\007\005\010\007\011\016\012" +
    "\013\013\021\026\032\001\002\000\006\021\uffdc\025\uffdc" +
    "\001\002\000\004\022\223\001\002\000\016\007\005\010" +
    "\007\011\016\012\013\013\021\027\043\001\002\000\004" +
    "\023\044\001\002\000\024\002\uffe4\004\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\017\uffe4\001\002" +
    "\000\010\016\036\021\uffdb\025\uffdb\001\002\000\022\002" +
    "\ufffe\006\014\007\005\010\007\011\016\012\013\013\021" +
    "\017\017\001\002\000\004\002\001\001\002\000\004\015" +
    "\246\001\002\000\006\005\234\016\233\001\002\000\004" +
    "\014\235\001\002\000\042\002\ufff6\004\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\017\ufff6" +
    "\020\ufff6\024\ufff6\030\ufff6\031\ufff6\034\ufff6\036\ufff6\001" +
    "\002\000\004\015\236\001\002\000\016\062\240\063\244" +
    "\064\241\065\243\066\237\067\245\001\002\000\006\005" +
    "\uffe6\016\uffe6\001\002\000\006\005\uffea\016\uffea\001\002" +
    "\000\006\005\uffe8\016\uffe8\001\002\000\006\005\uffeb\016" +
    "\uffeb\001\002\000\006\005\uffe7\016\uffe7\001\002\000\006" +
    "\005\uffe9\016\uffe9\001\002\000\006\005\uffe5\016\uffe5\001" +
    "\002\000\016\062\240\063\244\064\241\065\243\066\237" +
    "\067\245\001\002\000\006\005\uffec\016\uffec\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\006\002\ufffb\004\ufffb" +
    "\001\002\000\022\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\017\ufff8\001\002\000\004\002\000" +
    "\001\002\000\010\005\ufff0\015\263\016\ufff0\001\002\000" +
    "\006\005\257\016\256\001\002\000\004\014\260\001\002" +
    "\000\042\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\017\ufff7\020\ufff7\024\ufff7" +
    "\030\ufff7\031\ufff7\034\ufff7\036\ufff7\001\002\000\010\005" +
    "\uffef\015\261\016\uffef\001\002\000\026\014\103\020\077" +
    "\042\071\057\105\062\102\063\072\064\075\065\100\066" +
    "\076\067\104\001\002\000\042\005\uffed\016\uffed\041\113" +
    "\042\107\043\120\044\117\045\110\046\111\047\122\050" +
    "\124\051\116\052\112\053\123\054\115\055\114\056\121" +
    "\001\002\000\026\014\103\020\077\042\071\057\105\062" +
    "\102\063\072\064\075\065\100\066\076\067\104\001\002" +
    "\000\042\005\uffee\016\uffee\041\113\042\107\043\120\044" +
    "\117\045\110\046\111\047\122\050\124\051\116\052\112" +
    "\053\123\054\115\055\114\056\121\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\016\005\010\007\005\010\003\012\011\013" +
    "\017\027\014\001\001\000\004\025\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\251\001\001\000\012\005\010\010\003\012\011\027\250" +
    "\001\001\000\012\005\010\010\003\012\011\027\247\001" +
    "\001\000\002\001\001\000\004\026\231\001\001\000\004" +
    "\013\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\010\010\003\012\011\027\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\026\010\024\030\025\031\027\001\001\000\004\034\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\032\001\001\000\004" +
    "\034\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\041\011\040" +
    "\001\001\000\004\014\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\053\010\003\012\062\016\047" +
    "\017\065\020\063\021\045\022\046\023\064\024\050\032" +
    "\060\033\056\034\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\053\016\047\017" +
    "\065\020\063\021\045\022\046\023\064\024\050\033\215" +
    "\034\061\001\001\000\002\001\001\000\006\003\211\004" +
    "\100\001\001\000\006\003\206\004\100\001\001\000\002" +
    "\001\001\000\006\003\177\004\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\053" +
    "\016\047\017\065\020\063\021\045\022\046\023\064\024" +
    "\050\033\173\034\061\001\001\000\002\001\001\000\010" +
    "\010\003\012\062\032\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\072\004\100\035\073\001\001\000\006\003\155\004" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\146\004\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\105\004\100\001\001\000\002\001\001\000\006" +
    "\003\141\004\100\001\001\000\006\003\140\004\100\001" +
    "\001\000\006\003\137\004\100\001\001\000\006\003\136" +
    "\004\100\001\001\000\006\003\135\004\100\001\001\000" +
    "\006\003\134\004\100\001\001\000\006\003\133\004\100" +
    "\001\001\000\006\003\132\004\100\001\001\000\006\003" +
    "\131\004\100\001\001\000\006\003\130\004\100\001\001" +
    "\000\006\003\127\004\100\001\001\000\006\003\126\004" +
    "\100\001\001\000\006\003\125\004\100\001\001\000\006" +
    "\003\124\004\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\072\004\100\035\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\072\004\100\035\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\072\004" +
    "\100\035\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\201\001\001" +
    "\000\004\015\203\001\001\000\004\014\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\220\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\041\011\223\001\001\000\004\014\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\010" +
    "\010\003\012\011\027\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\261\004" +
    "\100\001\001\000\002\001\001\000\006\003\263\004\100" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    DeclOp Decl;
    AssignStatement AssignStat;
    VarDeclOp VarDecl;
    IdInitOp IdInit;

    ArrayList<IdInitOp> IdInitList;
    ArrayList<IdInitObblOp> IdInitObblList;
    ArrayList<DeclOp> DeclList;
    ArrayList<ParDeclOp> ParamDeclList, NonEmptyParamDeclList;
    ArrayList<VarDeclOp> VarDeclList;
    ArrayList<Statement> StatList;
    ArrayList<Identifier> IdList;
    ArrayList<ExprOp> ExprList;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int d_l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int d_l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DeclOp> d_l1 = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int m_f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m_f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainOp m_f_d = (MainOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d_l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d_l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> d_l2 = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramOp(d_l1, m_f_d, d_l2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int m_f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m_f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainOp m_f_d = (MainOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> d_l = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramOp(m_f_d, d_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= DeclList MainFunDecl 
            {
              ProgramOp RESULT =null;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DeclOp> d_l = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m_f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainOp m_f_d = (MainOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramOp(d_l, m_f_d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MainFunDecl 
            {
              ProgramOp RESULT =null;
		int m_f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainOp m_f_d = (MainOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProgramOp(m_f_d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<DeclOp> RESULT =null;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp v_d = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> d_l = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d_l.add(new DeclOp(v_d));
                                           RESULT = d_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<DeclOp> RESULT =null;
		int f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp f_d = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> d_l = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d_l.add(new DeclOp(f_d));
                                           RESULT = d_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= VarDecl 
            {
              ArrayList<DeclOp> RESULT =null;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclOp v_d = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Decl = new DeclOp(v_d);            //nuovo oggetto DeclOp usando il costruttore con VarDeclOp.
                                           DeclList = new ArrayList<DeclOp>();  //nuova lista di DeclOp: DeclList
                                           DeclList.add(Decl);                //aggiunto il nuovo oggetto DeclOp alla DeclList
                                           RESULT = DeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclList ::= FunDecl 
            {
              ArrayList<DeclOp> RESULT =null;
		int f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOp f_d = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Decl = new DeclOp(f_d);
                                           DeclList = new ArrayList<DeclOp>();
                                           DeclList.add(Decl);
                                           RESULT = DeclList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MainFunDecl ::= MAIN FunDecl 
            {
              MainOp RESULT =null;
		int f_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOp f_d = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MainOp("start:", f_d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdInitOp> i_l = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(t, i_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int i_o_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i_o_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<IdInitObblOp> i_o_l = (ArrayList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(VarDeclOp.Var.var, i_o_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.integer); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.bool); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.real); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.string); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.character); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitList ::= ID 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 IdInit = new IdInitOp(new Identifier((String) id));
                        IdInitList = new ArrayList<IdInitOp>();
                        IdInitList.add(IdInit);
                        RESULT = IdInitList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdInitOp> RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IdInitOp> i_l = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 i_l.add(new IdInitOp(new Identifier((String) id)));
                                            RESULT = i_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //oggetto da inserire (di tipo IdInitOp)
                                     AssignStat = new AssignStatement(new Identifier((String) id),e);
                                     //oggetto da ritornare
                                     IdInitList = new ArrayList<IdInitOp>();
                                     //aggiungo l'oggetto (di tipo IdInitOp) alla lista
                                     IdInitList.add(new IdInitOp(AssignStat));
                                     RESULT = IdInitList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInitOp> RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdInitOp> i_l = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //oggetto da inserire
                                                          AssignStat = new AssignStatement (new Identifier((String) id), e);
                                                          //aggiunta dell'oggetto da inserire alla lista di IdInitList
                                                          i_l.add(new IdInitOp(AssignStat));
                                                          RESULT = i_l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdInitObblOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstOp c = (ConstOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AssignStat = new AssignStatement (new Identifier((String) id), c);
                                           IdInitObblList = new ArrayList<IdInitObblOp>();
                                           IdInitObblList.add(new IdInitObblOp(AssignStat));
                                           RESULT = IdInitObblList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdInitObblOp> RESULT =null;
		int i_o_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i_o_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<IdInitObblOp> i_o_l = (ArrayList<IdInitObblOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstOp c = (ConstOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AssignStat = new AssignStatement (new Identifier((String) id),c);
                                                                     i_o_l.add(new IdInitObblOp(AssignStat));
                                                                     RESULT = i_o_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstOp(ConstOp.Type.integer, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstOp(ConstOp.Type.real, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		 RESULT = new ConstOp(ConstOp.Type.trueConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		 RESULT = new ConstOp(ConstOp.Type.falseConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstOp(ConstOp.Type.string, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Const ::= CHAR_CONST 
            {
              ConstOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstOp(ConstOp.Type.character, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int p_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int p_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<ParDeclOp> p_l = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunDeclOp(new Identifier((String) id), p_l, t, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunDecl ::= DEF ID LPAR RPAR COLON TypeOrVoid Body 
            {
              FunDeclOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunDeclOp(new Identifier((String) id), t, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              BodyOp RESULT =null;
		int v_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDeclOp> v_l = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> s_l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(v_l, s_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Body ::= LBRAC StatList RBRAC 
            {
              BodyOp RESULT =null;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> s_l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(new ArrayList<VarDeclOp>(), s_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Body ::= LBRAC VarDeclList RBRAC 
            {
              BodyOp RESULT =null;
		int v_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDeclOp> v_l = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(v_l, new ArrayList<Statement>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Body ::= LBRAC RBRAC 
            {
              BodyOp RESULT =null;
		 RESULT = new BodyOp();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int n_e_p_d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_e_p_d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDeclOp> n_e_p_d_l = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n_e_p_d_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int p_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp p_d = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 NonEmptyParamDeclList = new ArrayList<ParDeclOp>();
                                                                             NonEmptyParamDeclList.add(p_d);
                                                                             RESULT = NonEmptyParamDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int n_e_p_d_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n_e_p_d_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDeclOp> n_e_p_d_l = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p_dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p_dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp p_d = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 n_e_p_d_l.add(p_d);
                                                                             RESULT = n_e_p_d_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp(false, t, i_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp(true, t, i_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TypeOrVoid ::= Type 
            {
              TypeOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TypeOrVoid ::= VOID 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp(TypeOp.Type.voidType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclList ::= VarDecl 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclOp v = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 VarDeclList = new ArrayList<VarDeclOp>();
                                            VarDeclList.add(v);
                                            RESULT = VarDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp v = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDeclOp> v_l = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 v_l.add(v);
                                            RESULT = v_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatList ::= Stat 
            {
              ArrayList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 StatList = new ArrayList<Statement>();
                                   StatList.add(s);
                                   RESULT = StatList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> s_l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 s_l.add(s);
                                   RESULT = (ArrayList<Statement>) s_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= IfStat 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement ifStat = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement((IfStatement) ifStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= ForStat 
            {
              Statement RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatement forStat = (ForStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement((ForStatement) forStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatement readStat = (ReadStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement((ReadStatement) readStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatement writeStat = (WriteStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement((WriteStatement) writeStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatement assignStat = (AssignStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement((AssignStatement) assignStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatement whileStat = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Statement((WhileStatement) whileStat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= FunCall SEMI 
            {
              Statement RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Statement((FunCallOp) funCall); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnOp((ExprOp) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= RETURN SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ReturnOp(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement ((ExprOp) e, (BodyOp)body1, (BodyOp)body2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement ((ExprOp) e, (BodyOp)body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (BodyOp) body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement ((ExprOp) e, (BodyOp) body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AssignStat = new AssignStatement (new Identifier((String) id), new ConstOp(ConstOp.Type.integer, val1));
                                                                                        RESULT = new ForStatement (AssignStat, new ConstOp(ConstOp.Type.integer, val2), body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatement RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStatement ((ArrayList<Identifier>) i_l, new ConstOp(ConstOp.Type.string, val)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReadStat ::= IdList READ 
            {
              ReadStatement RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadStatement ((ArrayList<Identifier>) i_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 IdList = new ArrayList<Identifier>();
                                    IdList.add(new Identifier((String) id));
                                    RESULT = IdList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 i_l.add(new Identifier((String) id));
                                    RESULT = (ArrayList<Identifier>)i_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatement RESULT =null;
		int e_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExprOp> e_l = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatement (WriteStatement.Mode.write, (ArrayList<ExprOp>)e_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatement RESULT =null;
		int e_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExprOp> e_l = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatement (WriteStatement.Mode.writeln, (ArrayList<ExprOp>)e_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatement RESULT =null;
		int i_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> i_l = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExprOp> e_l = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatement ((ArrayList<Identifier>)i_l, (ArrayList<ExprOp>)e_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExprOp> e_l = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallOp(new Identifier((String) id), e_l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallOp(new Identifier((String) id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprList ::= Expr 
            {
              ArrayList<ExprOp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ExprList = new ArrayList<ExprOp>();
                                           ExprList.add(e);
                                           RESULT = ExprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExprOp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp e = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExprOp> e_l = (ArrayList<ExprOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e_l.add(e);
                                           RESULT = (ArrayList<ExprOp>)e_l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= TRUE 
            {
              ExprOp RESULT =null;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.trueConst));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FALSE 
            {
              ExprOp RESULT =null;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.falseConst)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= INTEGER_CONST 
            {
              ExprOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.integer, String.valueOf(val))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= REAL_CONST 
            {
              ExprOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.real, String.valueOf(val))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= STRING_CONST 
            {
              ExprOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.string, String.valueOf(val))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= CHAR_CONST 
            {
              ExprOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new ConstOp(ConstOp.Type.character, String.valueOf(val))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              ExprOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new Identifier((String) id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= FunCall 
            {
              ExprOp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCallOp f = (FunCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr PLUS Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new PlusOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MINUS Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new MinusOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr TIMES Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new TimesOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DIV Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new DivOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr AND Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new AndOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr POW Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new PowOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new StringConcatOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr OR Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new OrOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GT Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new GtOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GE Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new GeOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LT Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new LtOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LE Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new LeOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr EQ Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new EqOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr NE Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp e2 = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new NeOp(expr, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new MinusOp(expr)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprOp(new NotOp(expr)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= LPAR Expr RPAR 
            {
              ExprOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprOp expr = (ExprOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
